{"version":3,"sources":["../../../../../src/js/input-range/slider.jsx","../../../../../src/js/input-range/track.jsx","../../../../../src/js/input-range/key-codes.js","../../../../../src/js/utils/index.js","../../node_modules/autobind-decorator/lib/index.js","../../../../../src/js/input-range/label.jsx","../../../../src/js/index.js","../../../../../src/js/input-range/input-range.jsx","../../../../../src/js/input-range/value-transformer.js","../../../../../src/js/utils/captialize.js","../../../../../src/js/utils/clamp.js","../../../../../src/js/utils/distance-to.js","../../../../../src/js/utils/is-defined.js","../../../../../src/js/utils/is-number.js","../../../../../src/js/utils/is-object.js","../../../../../src/js/utils/length.js","../../../../../src/js/input-range/default-class-names.js","../../../../../src/js/input-range/range-prop-type.js","../../../../../src/js/input-range/value-prop-type.js"],"names":["Slider","ariaLabelledby","ariaControls","classNames","formatLabel","maxValue","minValue","onSliderDrag","onSliderKeyDown","percentage","type","value","isRequired","this","position","left","props","event","style","className","ref","aria-labelledby","aria-controls","aria-valuemax","aria-valuemin","aria-valuenow","draggable","onKeyDown","onMouseDown","onTouchStart","role","tabIndex","Component","Track","children","draggableTrack","onTrackDrag","onTrackMouseDown","percentages","node","width","max","min","trackDragEvent","x","y","activeTrackStyle","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","default","boundClass","target","keys","undefined","Reflect","ownKeys","prototype","Object","getOwnPropertyNames","getOwnPropertySymbols","concat","forEach","key","descriptor","getOwnPropertyDescriptor","defineProperty","boundMethod","fn","Error","definingProperty","configurable","get","hasOwnProperty","boundFn","bind","writable","exports","_len","arguments","length","args","Array","_key","apply","module","Label","labelValue","valueTransformer","InputRange","allowSameValues","disabled","name","onChangeStart","onChange","onChangeComplete","step","trackNode","values","positions","distanceTo","currentValues","isObject","isWithinRange","hasStepDifference","transformedValues","shouldUpdate","isMultiValue","requestAnimationFrame","prevEvent","stepValue","prevPosition","prevValue","offset","getKeyByPosition","isDefined","startValue","lastKeyMoved","getKeys","map","captialize","componentClassName","aria-disabled","onKeyUp","renderSliders","renderHiddenInputs","getPercentageFromPosition","getValueFromPosition","clientRect","sizePerc","getValueFromProps","getPercentageFromValue","getPercentagesFromValues","getPositionFromValue","getPositionsFromValues","getPositionFromEvent","clientX","clamp","getStepValueFromValue","valuePerStep","Math","string","pointA","pointB","xDiff","yDiff","numA","numB","activeTrack","disabledInputRange","inputRange","labelContainer","maxLabel","minLabel","slider","sliderContainer","track","valueLabel","isNumber","propName"],"mappings":"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","file":"static/js/6.312c4c86.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport Label from './label';\n\n/**\n * @ignore\n */\nexport default class Slider extends React.Component {\n  /**\n   * Accepted propTypes of Slider\n   * @override\n   * @return {Object}\n   * @property {Function} ariaLabelledby\n   * @property {Function} ariaControls\n   * @property {Function} className\n   * @property {Function} formatLabel\n   * @property {Function} maxValue\n   * @property {Function} minValue\n   * @property {Function} onSliderDrag\n   * @property {Function} onSliderKeyDown\n   * @property {Function} percentage\n   * @property {Function} type\n   * @property {Function} value\n   */\n  static get propTypes() {\n    return {\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string).isRequired,\n      formatLabel: PropTypes.func,\n      maxValue: PropTypes.number,\n      minValue: PropTypes.number,\n      onSliderDrag: PropTypes.func.isRequired,\n      onSliderKeyDown: PropTypes.func.isRequired,\n      percentage: PropTypes.number.isRequired,\n      type: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} props.classNames\n   * @param {Function} [props.formatLabel]\n   * @param {number} [props.maxValue]\n   * @param {number} [props.minValue]\n   * @param {Function} props.onSliderKeyDown\n   * @param {Function} props.onSliderDrag\n   * @param {number} props.percentage\n   * @param {number} props.type\n   * @param {number} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseMoveListener();\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n    this.removeDocumentTouchMoveListener();\n  }\n\n  /**\n   * @private\n   * @return {Object}\n   */\n  getStyle() {\n    const perc = (this.props.percentage || 0) * 100;\n    const style = {\n      position: 'absolute',\n      left: `${perc}%`,\n    };\n\n    return style;\n  }\n\n  /**\n   * Listen to mousemove event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseMoveListener() {\n    this.removeDocumentMouseMoveListener();\n    this.node.ownerDocument.addEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchmove event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchMoveListener() {\n    this.removeDocumentTouchMoveListener();\n    this.node.ownerDocument.addEventListener('touchmove', this.handleTouchMove);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseMoveListener() {\n    this.node.ownerDocument.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchMoveListener() {\n    this.node.ownerDocument.removeEventListener('touchmove', this.handleTouchMove);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown() {\n    this.addDocumentMouseMoveListener();\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleMouseUp() {\n    this.removeDocumentMouseMoveListener();\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseMove(event) {\n    this.props.onSliderDrag(event, this.props.type);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart() {\n    this.addDocumentTouchEndListener();\n    this.addDocumentTouchMoveListener();\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchMove(event) {\n    this.props.onSliderDrag(event, this.props.type);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleTouchEnd() {\n    this.removeDocumentTouchMoveListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.props.onSliderKeyDown(event, this.props.type);\n  }\n\n  /**\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const style = this.getStyle();\n\n    return (\n      <span\n        className={this.props.classNames.sliderContainer}\n        ref={(node) => { this.node = node; }}\n        style={style}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"value\">\n          {this.props.value}\n        </Label>\n\n        <div\n          aria-labelledby={this.props.ariaLabelledby}\n          aria-controls={this.props.ariaControls}\n          aria-valuemax={this.props.maxValue}\n          aria-valuemin={this.props.minValue}\n          aria-valuenow={this.props.value}\n          className={this.props.classNames.slider}\n          draggable=\"false\"\n          onKeyDown={this.handleKeyDown}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleTouchStart}\n          role=\"slider\"\n          tabIndex=\"0\" />\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\n\n/**\n * @ignore\n */\nexport default class Track extends React.Component {\n  /**\n   * @override\n   * @return {Object}\n   * @property {Function} children\n   * @property {Function} classNames\n   * @property {Boolean} draggableTrack\n   * @property {Function} onTrackDrag\n   * @property {Function} onTrackMouseDown\n   * @property {Function} percentages\n   */\n  static get propTypes() {\n    return {\n      children: PropTypes.node.isRequired,\n      classNames: PropTypes.objectOf(PropTypes.string).isRequired,\n      draggableTrack: PropTypes.bool,\n      onTrackDrag: PropTypes.func,\n      onTrackMouseDown: PropTypes.func.isRequired,\n      percentages: PropTypes.objectOf(PropTypes.number).isRequired,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {InputRangeClassNames} props.classNames\n   * @param {Boolean} props.draggableTrack\n   * @param {Function} props.onTrackDrag\n   * @param {Function} props.onTrackMouseDown\n   * @param {number} props.percentages\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n    this.trackDragEvent = null;\n  }\n\n  /**\n   * @private\n   * @return {ClientRect}\n   */\n  getClientRect() {\n    return this.node.getBoundingClientRect();\n  }\n\n  /**\n   * @private\n   * @return {Object} CSS styles\n   */\n  getActiveTrackStyle() {\n    const width = `${(this.props.percentages.max - this.props.percentages.min) * 100}%`;\n    const left = `${this.props.percentages.min * 100}%`;\n\n    return { left, width };\n  }\n\n  /**\n   * Listen to mousemove event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseMoveListener() {\n    this.removeDocumentMouseMoveListener();\n    this.node.ownerDocument.addEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseMoveListener() {\n    this.node.ownerDocument.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseMove(event) {\n    if (!this.props.draggableTrack) {\n      return;\n    }\n\n    if (this.trackDragEvent !== null) {\n      this.props.onTrackDrag(event, this.trackDragEvent);\n    }\n\n    this.trackDragEvent = event;\n  }\n\n  /**\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleMouseUp() {\n    if (!this.props.draggableTrack) {\n      return;\n    }\n\n    this.removeDocumentMouseMoveListener();\n    this.removeDocumentMouseUpListener();\n    this.trackDragEvent = null;\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event - User event\n   */\n  @autobind\n  handleMouseDown(event) {\n    const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n    const trackClientRect = this.getClientRect();\n    const position = {\n      x: clientX - trackClientRect.left,\n      y: 0,\n    };\n\n    this.props.onTrackMouseDown(event, position);\n\n    if (this.props.draggableTrack) {\n      this.addDocumentMouseMoveListener();\n      this.addDocumentMouseUpListener();\n    }\n  }\n\n  /**\n   * @private\n   * @param {SyntheticEvent} event - User event\n   */\n  @autobind\n  handleTouchStart(event) {\n    event.preventDefault();\n\n    this.handleMouseDown(event);\n  }\n\n  /**\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const activeTrackStyle = this.getActiveTrackStyle();\n\n    return (\n      <div\n        className={this.props.classNames.track}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        ref={(node) => { this.node = node; }}>\n        <div\n          style={activeTrackStyle}\n          className={this.props.classNames.activeTrack} />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","/** @ignore */\nexport const DOWN_ARROW = 40;\n\n/** @ignore */\nexport const LEFT_ARROW = 37;\n\n/** @ignore */\nexport const RIGHT_ARROW = 39;\n\n/** @ignore */\nexport const UP_ARROW = 38;\n","export { default as captialize } from './captialize';\nexport { default as clamp } from './clamp';\nexport { default as distanceTo } from './distance-to';\nexport { default as isDefined } from './is-defined';\nexport { default as isNumber } from './is-number';\nexport { default as isObject } from './is-object';\nexport { default as length } from './length';\n","/**\n * @copyright 2015, Andrey Popp <8mayday@gmail.com>\n *\n * The decorator may be used on classes or methods\n * ```\n * @autobind\n * class FullBound {}\n *\n * class PartBound {\n *   @autobind\n *   method () {}\n * }\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = autobind;\n\nfunction autobind() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 1) {\n    return boundClass.apply(undefined, args);\n  } else {\n    return boundMethod.apply(undefined, args);\n  }\n}\n\n/**\n * Use boundMethod to bind all methods on the target.prototype\n */\nfunction boundClass(target) {\n  // (Using reflect to get all keys including symbols)\n  var keys = undefined;\n  // Use Reflect if exists\n  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\n    keys = Reflect.ownKeys(target.prototype);\n  } else {\n    keys = Object.getOwnPropertyNames(target.prototype);\n    // use symbols if support is provided\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));\n    }\n  }\n\n  keys.forEach(function (key) {\n    // Ignore special case target method\n    if (key === 'constructor') {\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n    // Only methods need binding\n    if (typeof descriptor.value === 'function') {\n      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));\n    }\n  });\n  return target;\n}\n\n/**\n * Return a descriptor removing the value and returning a getter\n * The getter will return a .bind version of the function\n * and memoize the result against a symbol on the instance\n */\nfunction boundMethod(target, key, descriptor) {\n  var fn = descriptor.value;\n\n  if (typeof fn !== 'function') {\n    throw new Error('@autobind decorator can only be applied to methods not: ' + typeof fn);\n  }\n\n  // In IE11 calling Object.defineProperty has a side-effect of evaluating the\n  // getter for the property which is being replaced. This causes infinite\n  // recursion and an \"Out of stack space\" error.\n  var definingProperty = false;\n\n  return {\n    configurable: true,\n    get: function get() {\n      if (definingProperty || this === target.prototype || this.hasOwnProperty(key)) {\n        return fn;\n      }\n\n      var boundFn = fn.bind(this);\n      definingProperty = true;\n      Object.defineProperty(this, key, {\n        value: boundFn,\n        configurable: true,\n        writable: true\n      });\n      definingProperty = false;\n      return boundFn;\n    }\n  };\n}\nmodule.exports = exports['default'];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @ignore\n * @param {Object} props\n * @param {InputRangeClassNames} props.classNames\n * @param {Function} props.formatLabel\n * @param {string} props.type\n */\nexport default function Label(props) {\n  const labelValue = props.formatLabel ? props.formatLabel(props.children, props.type) : props.children;\n\n  return (\n    <span className={props.classNames[`${props.type}Label`]}>\n      <span className={props.classNames.labelContainer}>\n        {labelValue}\n      </span>\n    </span>\n  );\n}\n\n/**\n * @type {Object}\n * @property {Function} children\n * @property {Function} classNames\n * @property {Function} formatLabel\n * @property {Function} type\n */\nLabel.propTypes = {\n  children: PropTypes.node.isRequired,\n  classNames: PropTypes.objectOf(PropTypes.string).isRequired,\n  formatLabel: PropTypes.func,\n  type: PropTypes.string.isRequired,\n};\n","import InputRange from './input-range/input-range';\n\n/**\n * @ignore\n * @typedef {Object} ClientRect\n * @property {number} height\n * @property {number} left\n * @property {number} top\n * @property {number} width\n */\n\n/**\n * @typedef {Object} InputRangeClassNames\n * @property {string} activeTrack\n * @property {string} disabledInputRange\n * @property {string} inputRange\n * @property {string} labelContainer\n * @property {string} maxLabel\n * @property {string} minLabel\n * @property {string} slider\n * @property {string} sliderContainer\n * @property {string} track\n * @property {string} valueLabel\n */\n\n/**\n * @typedef {Function} LabelFormatter\n * @param {number} value\n * @param {string} type\n * @return {string}\n */\n\n/**\n * @ignore\n * @typedef {Object} Point\n * @property {number} x\n * @property {number} y\n */\n\n/**\n * @typedef {Object} Range\n * @property {number} min - Min value\n * @property {number} max - Max value\n */\n\nexport default InputRange;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      allowSameValues: PropTypes.bool,\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      allowSameValues: false,\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {boolean} [props.allowSameValues]\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.lastKeyMoved = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             this.props.allowSameValues\n              ? values.min <= values.max\n              : values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n    this.lastKeyMoved = key;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n    case RIGHT_ARROW:\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n    const keys = this.props.allowSameValues &&\n      this.lastKeyMoved === 'min'\n      ? this.getKeys().reverse()\n      : this.getKeys();\n\n    return keys.map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n","import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n","/**\n * Captialize a string\n * @ignore\n * @param {string} string\n * @return {string}\n */\nexport default function captialize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","/**\n * Clamp a value between a min and max value\n * @ignore\n * @param {number} value\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nexport default function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n","/**\n * Calculate the distance between pointA and pointB\n * @ignore\n * @param {Point} pointA\n * @param {Point} pointB\n * @return {number} Distance\n */\nexport default function distanceTo(pointA, pointB) {\n  const xDiff = (pointB.x - pointA.x) ** 2;\n  const yDiff = (pointB.y - pointA.y) ** 2;\n\n  return Math.sqrt(xDiff + yDiff);\n}\n","/**\n * Check if a value is defined\n * @ignore\n * @param {*} value\n * @return {boolean}\n */\nexport default function isDefined(value) {\n  return value !== undefined && value !== null;\n}\n","/**\n * Check if a value is a number\n * @ignore\n * @param {*} value\n * @return {boolean}\n */\nexport default function isNumber(value) {\n  return typeof value === 'number';\n}\n","/**\n * Check if a value is an object\n * @ignore\n * @param {*} value\n * @return {boolean}\n */\nexport default function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n","/**\n * Calculate the absolute difference between two numbers\n * @ignore\n * @param {number} numA\n * @param {number} numB\n * @return {number}\n */\nexport default function length(numA, numB) {\n  return Math.abs(numA - numB);\n}\n","/**\n * Default CSS class names\n * @ignore\n * @type {InputRangeClassNames}\n */\nconst DEFAULT_CLASS_NAMES = {\n  activeTrack: 'input-range__track input-range__track--active',\n  disabledInputRange: 'input-range input-range--disabled',\n  inputRange: 'input-range',\n  labelContainer: 'input-range__label-container',\n  maxLabel: 'input-range__label input-range__label--max',\n  minLabel: 'input-range__label input-range__label--min',\n  slider: 'input-range__slider',\n  sliderContainer: 'input-range__slider-container',\n  track: 'input-range__track input-range__track--background',\n  valueLabel: 'input-range__label input-range__label--value',\n};\n\nexport default DEFAULT_CLASS_NAMES;\n","import { isNumber } from '../utils';\n\n/**\n * @ignore\n * @param {Object} props - React component props\n * @return {?Error} Return Error if validation fails\n */\nexport default function rangePropType(props) {\n  const { maxValue, minValue } = props;\n\n  if (!isNumber(minValue) || !isNumber(maxValue)) {\n    return new Error('\"minValue\" and \"maxValue\" must be a number');\n  }\n\n  if (minValue >= maxValue) {\n    return new Error('\"minValue\" must be smaller than \"maxValue\"');\n  }\n}\n","import { isNumber, isObject } from '../utils';\n\n/**\n * @ignore\n * @param {Object} props\n * @return {?Error} Return Error if validation fails\n */\nexport default function valuePropType(props, propName) {\n  const { maxValue, minValue } = props;\n  const value = props[propName];\n\n  if (!isNumber(value) && (!isObject(value) || !isNumber(value.min) || !isNumber(value.max))) {\n    return new Error(`\"${propName}\" must be a number or a range object`);\n  }\n\n  if (isNumber(value) && (value < minValue || value > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n\n  if (isObject(value) && (value.min < minValue || value.min > maxValue || value.max < minValue || value.max > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n}\n"],"sourceRoot":""}